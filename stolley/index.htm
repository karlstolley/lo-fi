<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>The Lo-Fi Manifesto</title>
<!--Load stylesheets-->
<link rel="stylesheet" href="manifesto.css" media="screen" />
<link rel="stylesheet" href="print.css" media="print" />
<!--Fix some CSS things for IE-->
<!--[if IE]><link rel="stylesheet" href="ie.css" media="all" /><![endif]-->
<!--Load the Mootools library elements-->
<script type="text/javascript" src="mootools.js"></script>
<!--Load the site-specific javascript-->
<script type="text/javascript" src="site.js"></script>
</head>
<body>
<div id="container">
  <h1>The L0-FI Manifesto</h1>
  <!--Keep screen readers from suffering through the ASCII art with a skip link-->
  <p class="skip">ASCII art appears below. <a href="#preamble">Skip to main content</a>.</p>
  <!--The span tags on the ASCII art is a perversion of XHTML and CSS. Don't do this. Ever.-->
  <pre title="The LO-FI Manifesto">          __    __
         / /_  / /_    ___ <span class="lo-fi"> __     ____            ______  ____</span>
        / __/ / __ \  / _ \<span class="lo-fi">/ /    / __ \          / ____/ /  _/</span>
       / /_  / / / / /  __<span class="lo-fi">/ /    / / / / ______  / /_     / /</span>
       \__/ /_/ /_/_ \___<span class="lo-fi">/ /___ / /_/ / /_____/ / __/   _/ /</span>  __
            /  |/  / ___<span class="lo-fi">/_____/</span>_<span class="lo-fi">\____</span>(_) / __/ <span class="lo-fi">/_/</span>    _<span class="lo-fi">/___/</span> / /_  ____
           / /|_/ / / __ `/ / __ \  / / / /_  / _ \  / ___/ / __/ / __ \
          / /  / / / /_/ / / / / / / / / __/ /  __/ (__  ) / /_  / /_/ /
         /_/  /_/  \__,_/ /_/ /_/ /_/ /_/    \___/ /____/  \__/  \____/

              
               + - + - + - + - +   + - + - + - + - + - + - + - + 
               | K | A | R | L |   | S | T | O | L | L | E | Y |
               + - + - + - + - +   + - + - + - + - + - + - + - +
</pre>
  <h2 id="preamble">Preamble</h2>
  <p>The time has come to reject expensive, proprietary consumer and prosumer
    software that limits the extensibility of digital discourse and binds digital
    production literacies to programs that are destined for disruptive upgrades
    or obsolescence.</p>
  <p>The digital discourse that we, in the loosely-defined fields of rhetoric
    and composition, computers and writing, and technical communication, ought
    to be producing should be software- and device-independent.</p>
  <p>Furthermore, the literacies and language we develop as digital producers
    in our efforts to advance scholarship and knowledge-making should enable
    us to speak confidently, authoritatively, and unambiguously with one another
    about digital production, regardless of who can afford (or install) what
    at their home institutions or on their personal machines.</p>
  <p>And as teachers, we should actively seek to provide students with sustainable,
    extensible digital literacies through open, rhetorically grounded digital
    production practices that emphasizes the <em>source</em> in “open source.”
    Neither Flash, Word, Dreamweaver nor any one software package, proprietary
    or open-source, is consistent with that goal.</p>
  <h2>Defining Lo-fi Technologies</h2>
  <p>Lo-fi production technologies are stable, free, and consist of and/or can
    retrograde to:</p>
  <ol>
    <li>Plain text files (.txt, .xml, .htm, .css, .js, etc.)</li>
    <li>Plain text editors (Notepad, TextEdit, pico/nano, vi, etc.)</li>
    <li>Open languages expressed in plain text (XML, XHTML, CSS, JavaScript,
      etc.)</li>
    <li>Single-media files (image, audio, video) in standardized, open formats</li>
  </ol>
  <p>Yet despite their humble status and decades-old base technology (plain text),
    lo-fi technologies are the root of user experiences that are remarkably hi-fi,
    like <acronym title="Asychronous JavaScript and XML">AJAX</acronym> (whose
    most famous application may be Google’s Gmail service).</p>
  <h2>Lo-fi is <acronym class="lo-fi" title="Lossless, Open, Flexible, In(ter)dependent">LOFI</acronym></h2>
  <p>“Lo-fi” describes a preferred class of production technologies that digital
    producers should be able to command, but as an acronym, <acronym class="lo-fi" title="Lossless, Open, Flexible, In(ter)dependent">LOFI</acronym> outlines
    four principles of digital production that are crucial to the advancement,
    extension, and preservation of digital discourse:</p>
  <ul id="lofi-acronym">
    <li><strong>Lossless</strong>: Discourse presented through lo-fi production
      technologies neither degrades nor becomes trapped in the production itself.
      Text migrates and transforms from a single source (e.g., XML or an application
      of XML); images, video, and other media elements maintain their integrity
      as individual files that may be readily combined into new productions.</li>
    <li><strong>Open</strong>: Lo-fi artifacts’ source code and media elements
      are available for inspection, revision, and extension outside the scope
      of any one piece of production software, and any one producer. Openness
      includes, by default, end-user/reader customization and repurposing.</li>
    <li><strong>Flexible</strong>: Content presented using lo-fi production technologies
      can be experienced unobtrusively in multiple ways by different users equipped
      with a wide variety of conventional, mobile, and adaptive devices—from
      one single artifact.</li>
    <li><strong>In(ter)dependent</strong>: Lo-fi production technologies direct
      orchestration (like a recipe), not composition (like a TV dinner), allowing
      users’ devices to interpret and perhaps repurpose the digital artifact.</li>
  </ul>
  <h2>Manifesto</h2>
  <!--[if lt IE 7]>
  <p class="warning">Dear IE User,<br />I’m sorry that you’re using such a rotten, awful old browser. You have no idea what you’re missing by using this old thing. The points below are clickable, even though your browser will give you no visual indication of that. Consider upgrading to <a href="http://www.mozilla.com/firefox/">FireFox</a>, if that's possible. And pay careful attention to Point 7.<br />
—KS</p>
  <![endif]-->
  <dl id="manifesto-points">
    <!--JavaScript should really loop through and add the toggler/element and atStart classes-->
    <dt>1. Software is a poor organizing principle for digital production.</dt>
    <dd>
      <div>
        <blockquote>
          <p>“What program do you use?” is a question I often get about the slides
            I use to present my work. I have concluded that the proper answer
            to the question is to counter-suggest the asking of a different question,
            “What <em>principle</em> do you use?” <cite><span>John Maeda,</span> The
            Laws of Simplicity</cite></p>
        </blockquote>
        <p>Digital rhetoricians should be concerned when a software program like
          Microsoft PowerPoint becomes so ubiquitous that <em>PowerPoint</em> is
          synonymous with <em>slideshow</em> the way <em>Kleenex</em> is synonymous
          with <em>tissue</em>. Genres, in other words, should be free agents—and
          not owned, even linguistically, by any one company or program.</p>
        <p><a href="http://meyerweb.com/">Eric Meyer</a>, CSS guru and all-around
          design wizard, has worked to collaboratively develop a <a href="http://meyerweb.com/eric/tools/s5/">Simple
          Standards-based Slide Show System</a> (S5) that uses structural XHTML,
          media-specific CSS, and cross-browser JavaScript to deploy slide shows.
          Unlike PowerPoint, which requires either the PowerPoint software itself
          or the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=048DC840-14E1-467D-8DCA-19D2A8FD7485&amp;displaylang=en">Microsoft
          PowerPoint Viewer</a>, S5 runs in any web browser. If a speaker needs
          speaker’s notes, she only needs to hit print from <a href="http://meyerweb.com/eric/tools/s5/s5-intro.html">the
          slideshow itself</a>, and let <a href="http://www.alistapart.com/articles/goingtoprint/">a
          print-based CSS file</a> do the rest.</p>
        <p>Lo-fi systems like S5 (there are others, like <a href="http://www.opera.com/support/tutorials/operashow/">Opera
            Show</a>, which takes advantage of the Opera browser’s support for <a href="http://www.w3.org/TR/REC-CSS2/media.html#media-types">the
            CSS “projection” media type</a>; S5 <a href="http://meyerweb.com/eric/thoughts/2006/01/12/opera-and-s5-12a1/">also
            addresses</a> this special Opera functionality) necessarily shift
            producers’ focus from expensive and bulky, plugin-/software-dependent
            PowerPoint presentations to the genre itself, the rhetoric’s organizing
            principle that has withstood the tests of time (and indeed, challenges
            to various genres and the concept of genre itself). Better still,
            systems like S5 result in artifacts that can be opened, viewed, and
            presented in the most ubiquitous piece of software yet invented:
            the Web browser. No special plugins or downloads required; an audience-friendly
            rhetorical choice that is too often underutilized.</p>
      </div>
    </dd>
    <dt>2. Digital literacy is too important to be entrusted to software.</dt>
    <dd>
      <div>
        <blockquote>
          <p>Technologies may be the most profound when they disappear. But when
            this happens, they also develop the most potential for being dangerous. <cite title="Page 160"><span>Cynthia
            Selfe,</span> Technology and Literacy in the Twenty-First Century</cite></p>
        </blockquote>
        <p>Digital literacy is too important to be left to the tumultuous uncertainties
          of software, like corporate acquisitions, mergers, and frequent disruptive
          version releases. Software has two destinations: upgrade or obsolescence.
          Either one is disruptive.</p>
        <p>Adobe’s <a href="http://www.adobe.com/aboutadobe/invrelations/adobeandmacromedia.html">announcement</a> in
          spring of 2005 that it would be acquiring Macromedia—the company behind
          Flash, Dreamweaver, and other web production software mainstays—should
          have raised very serious questions about producing and teaching too
          closely with particular software technologies, which can potentially
          evaporate as quickly as the ink dries on a corporate merger.</p>
        <p>Yet even community-developed, open-source software is not necessarily
          the answer to the inherent troubles of corporate software packages.
          While the digital production literacies developed through open technologies
          may be immune to corporate mergers (though not necessarily corporate
          buyouts), they do not provide for an “under the hood” digital literacy
          that lo-fi technologies do, particularly production languages.</p>
        <p>In short, acts of digital production should contribute to a deeper
          literacy than learning to point and click one’s way through an arbitrary
          set of menus and dialog boxes. Literacy rests with languages; visual
          interfaces, particularly for digital production, only obscure languages,
          making them “disappear.”</p>
        <p>Languages, while subject to future versions, often retain much of
          their essential character (e.g. SGML, HTML, and XML look and act very
          similarly) or share a few common ancestors (often C/C++)—and can be
          safely used even after a revision of the language (e.g., one can confidently
          write in HTML 4.01, even though XHTML 1.0 is preferable). And in the
          best cases, as when one follows “<a href="http://www.literateprogramming.com/">literate
          programming</a>” practices, literacy can be preserved and passed on,
          even demonstrated—the code serves not only the machine that must interpret
          it, but human beings who might attempt to reconfigure, revise, or repurpose
          it in the future.</p>
      </div>
    </dd>
    <dt>3. Content should never be trapped by production technologies.</dt>
    <dd>
      <div>
        <blockquote>
          <p>In an extreme view, the world can be seen as only connections, nothing
            else.<cite title="Page 12"> <span>Tim Berners-Lee,</span> Weaving
            the Web</cite></p>
        </blockquote>
        <p>Many popular software programs (PowerPoint, Word, Acrobat, etc.) create
          “roach motels” for content and information: the data checks in (via
          File &gt; Import), but it never checks out. Such digital artifacts—the
          PowerPoint, the PDF—are only a marginal improvement over the entrapped
          nature of analog/print information; and in some ways (e.g., the requirement
          of a particular piece of software to view the artifact) are actually
          steps backwards from the relatively open access that books and other
          printed matter provide.</p>
        <p> Single-sourcing with lo-fi XML technologies is quickly becoming an
          unparalleled method to present content (though our fields have yet
          to actively embrace them). Single-media files for image, sound, and
          video should remain separate and be linked or otherwise referenced
          outside of a File &gt; Import scheme.</p>
        <p>Ultimately, end users and their devices should be responsible for
          combining content of different media types—not software, and really
          not producers, either. The producer’s task is to reference and orchestrate
          elements that can be flexibly accessed in a combined or piecemeal fashion.</p>
      </div>
    </dd>
    <dt>4. Code is just as important as content.</dt>
    <dd>
      <div>
        <blockquote>
          <p>The ability to “read” a medium means you can <em>access</em> materials
            and tools created by others. The ability to “write” in a medium means
            you can <em>generate</em> materials and tools for others. You must
            have both to be literate. <cite class="article" title="Page 125"><span>Alan
            Kay,</span> “User Interface: A Personal View”</cite></p>
        </blockquote>
        <p>Lo-fi technologies rely on human-editable code, rather than corporate
          secrets, to make communication possible. Therefore, the code is just
          as important as the content; effective digital rhetoric rests on both.
          (Abstracted just a little, being unable to access a Power Point presentation
          by virtue of lacking the Power Point software is, really, a code issue.)</p>
        <p>Languages that early adopters in our field worked with—HTML, JavaScript
          (Netscape)/JScript (Internet Explorer)—were forgiving and essentially
          without a common standard. Thus the WYSIWYG editor and other code generating
          programs were easily adopted, because they generated code that was
          no worse (nor, really, better) than what humans could generate.</p>
        <p>XML has changed all of that. An XML document must be perfect, its
          (simple) rules followed strictly and to the letter of the standard.
          That’s what makes XML so powerful and interoperable: by adhering to
          standards that are widely accepted, information—iTunes libraries, banking
          data, operating system preferences—can be passed easily from one application,
          person, or device to another without human assistance or intervention.</p>
        <p>Shoddily written code sends the same bad, if unintentional messages
          about content that a shoddily produced print publication does. Writing
          good code is neither an end in itself nor a testament to the supremacy
          of technology, but rather an equal application of the care and attention
          to detail that scholars, in particular, expect of content.</p>
      </div>
    </dd>
    <dt>5. Respect and forgive the end user.</dt>
    <dd>
      <div>
        <blockquote>
          <p>Don’t make me jump through hoops just because you don’t want to
            write a little bit of code. <cite title="Page 164"><span>Steve Krug,</span> Don’t
            Make Me Think, (2nd ed.)</cite></p>
        </blockquote>
        <p>The good will of audience members is soon lost when their first encounter
          with a digital is a series of messages demanding the installation or
          upgrade of software and plugins or, worse still, an announcement to
          the effect that their equipment (and by extension, financial status
          or physical ability) is inadequate and beyond the producer’s toleration.</p>
        <p>Lo-fi production technologies deliver artifacts that are editable
          everywhere, and thanks to the ubiquity of web browsers, accessible
          everywhere, too (at least to some extent). Rather than developing after-the-fact
          alternative content (e.g., to make up for a missing Flash movie), producing
          and inventing content in lo-fi technologies that is later replaced/enhanced
          by hi-fi technologies is a much smarter way of working. Users will
          appreciate not being told what they must do (particularly if they are
          left blissfully ignorant of the enhanced coolness they’re missing out
          on); producers can develop content and ideas in far less taxing environment
          (compared to Flash), in far more portable and extensible formats, like
          XML.</p>
      </div>
    </dd>
    <dt>6. If a hi-fi solution is necessary, keep it dynamic and unobtrusive.</dt>
    <dd>
      <div>
        <p>Ultimately, there are production problems that lo-fi technologies
          are not yet poised to solve: vector graphics (until the SVG standard
          is more widely implemented) and 3D modeling are two examples. Yet even
          sound and video are still available only through media players and
          plugins; no browser has native support for sound (even IE relies on
          its close marriage with Windows Media Player).</p>
        <p>Lo-fi typography, too, is lagging behind its hi-fi counterparts. Designing
          with CSS means limiting oneself to fonts commonly available on most
          systems. While there are glimmers of hope that major Web browsers will
          enable <a href="http://www.alistapart.com/articles/cssatten">support
          for TrueType Web fonts</a>—fonts that can be accessed over the Web
          (versus requiring installation on an end-user’s computer)—for now the
          typography tool of choice is <a href="http://www.mikeindustries.com/sifr">Scalable
          Inman Flash Replacement</a> (sIFR, pron. “siffer,” currently in <a href="http://novemberborn.net/sifr3">version
          3</a>). sIFR relies on the lo-fi technologies of structural HTML, CSS,
          and JavaScript, plus a small, empty Flash movie containing the font
          one wishes to use with an HTML page.</p>
        <p>If a reader’s browser lacks or has disabled JavaScript or the Flash
          player, the lo-fi CSS styling or simple HTML text will be displayed
          instead: a dynamic (and unobtrusive) improvement over CSS <a href="http://www.mezzoblue.com/tests/revised-image-replacement/">image
          replacement techniques</a>—many of which fail in an imageless CSS-enabled
          environment.</p>
        <p>The use of any hi-fi technology should operate much like sIFR: taking
          some readily available media element or text, and tricking it out with
          extended functionality for properly equipped users. The videos on YouTube,
          for example, are most likely dynamically loaded into a shell Flash
          movie that contains the controls for playing and pausing the video
          clip. However, if YouTube were to be fully unobtrusive, they would
          offer links in the HTML to movies in different formats (until an open,
          widely supported format were available; see “Insist on open standards
          and formats” below). Of course, that would make for easy downloading
          and local storage of the videos on YouTube (which would be good for
          users, bad for YouTube and its sponsors, as well as copyright holders).</p>
        <p>Scott Schiller’s <a href="http://www.schillmania.com/projects/soundmanager2/">SoundManager
            2</a>, for example, takes simple HTML links to sound files, and makes
            them playable on a Web page for users with both JavaScript and Flash
            enabled (if they don’t, they can simply follow the links and download
            the sound files for use with whatever media player they have).</p>
      </div>
    </dd>
    <dt>7. Insist on open standards and formats, <span class="warning">and software
        that supports them</span>.</dt>
    <dd>
      <div>
        <blockquote>
          <p>Because they share a common parent and abide by the same house rules,
            all XML applications are compatible with each other, making it easier
            for developers to manipulate one set of XML data via another and
            to develop new XML applications as the need arises, without fear
            of incompatibility. <cite title="Page 116"><span>Jeffrey Zeldman,</span> Designing
            with Web Standards, (2nd ed.)</cite></p>
        </blockquote>
        <p>It's astounding that there are not yet open standards for sound or
          video. The Ogg media container and its Vorbis and Theora CODECs, for
          sound and video respectively, are both promising and encouraged on
          Wikipedia, particularly the Wikimedia Commons. Unfortunately, at present,
          Ogg formats require CODECs to be downloaded for use within other media
          players, adding an extra step to downloading Windows Media Player,
          QuickTime, or other players. (However, there is talk of <a href="http://mozillalinks.org/wp/2007/06/firefox-3-to-feature-native-audio-video-support/">native
          Ogg support within Firefox</a> coupled with the <a href="http://www.whatwg.org/">WHATWG</a>’s <a href="http://www.whatwg.org/specs/web-apps/current-work/">HTML
          5 Draft</a> specification, which is competing, somewhat, with the W3C).</p>
        <p>There are standards for languages, which are openly available from <a href="http://w3.org/">W3C</a> (e.g., <a href="http://www.w3.org/XML/">XML</a>, <a href="http://www.w3.org/TR/xhtml1/">XHTML</a>, <a href="http://www.w3.org/Style/CSS/">CSS</a>)
          and <a href="http://www.ecma-international.org/">ECMA</a> (most notably <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</a>,
          the standard version of JavaScript). But there are other standards,
          from character sets at <a href="http://www.iso.org/">ISO</a> to <a href="http://www.iana.org/assignments/media-types/">file
          formats and MIME/Internet media types</a> at <a href="http://www.iana.org/">IANA</a>.
          And if all else fails, particularly regarding choices of single-media
          files, consult the <a href="http://www.loc.gov/standards/">United States
          Library of Congress’s developed and adopted standards</a>. All free.
          All open. All lo-fi.</p>
      </div>
    </dd>
  </dl>
  <h2>References</h2>
  <ul id="references">
    <li>List goes here.</li>
  </ul>
</div>
</body>
</html>
