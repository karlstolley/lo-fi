<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>The Lo-Fi Manifesto</title>
<!--Load stylesheets-->
<link rel="stylesheet" href="manifesto.css" media="screen" />
<link rel="stylesheet" href="print.css" media="print" />
<!--Fix some CSS things for IE-->
<!--[if IE]><link rel="stylesheet" href="ie.css" media="all" /><![endif]-->
<!--Load the Mootools library elements-->
<script type="text/javascript" src="mootools.js"></script>
<!--Load the site-specific javascript-->
<script type="text/javascript" src="site.js"></script>
</head>
<body>
<div id="container">
  <h1 class="skip">The L0-FI Manifesto</h1>
  <h2 class="skip">Karl Stolley, Illinois Institute of Technology</h2>
  <!--Keep screen readers from suffering through the ASCII art with a skip link-->
  <p class="skip">ASCII art appears below. <a href="#preamble">Skip to main content</a>.</p>
  <!--The span tags on the ASCII art is a perversion of XHTML and CSS. Don't do this. Ever.-->
  <pre title="The LO-FI Manifesto">          __    __
         / /_  / /_    ___ <span class="lo-fi"> __     ____            ______  ____</span>
        / __/ / __ \  / _ \<span class="lo-fi">/ /    / __ \          / ____/ /  _/</span>
       / /_  / / / / /  __<span class="lo-fi">/ /    / / / / ______  / /_     / /</span>
       \__/ /_/ /_/_ \___<span class="lo-fi">/ /___ / /_/ / /_____/ / __/   _/ /</span>  __
            /  |/  / ___<span class="lo-fi">/_____/</span>_<span class="lo-fi">\____</span>(_) / __/ <span class="lo-fi">/_/</span>    _<span class="lo-fi">/___/</span> / /_  ____
           / /|_/ / / __ `/ / __ \  / / / /_  / _ \  / ___/ / __/ / __ \
          / /  / / / /_/ / / / / / / / / __/ /  __/ (__  ) / /_  / /_/ /
         /_/  /_/  \__,_/ /_/ /_/ /_/ /_/    \___/ /____/  \__/  \____/

              
               + - + - + - + - +   + - + - + - + - + - + - + - + 
               | K | A | R | L |   | S | T | O | L | L | E | Y |
               + - + - + - + - +   + - + - + - + - + - + - + - +
</pre>
  <h2 id="preamble">Preamble</h2>
  <p>The time has come to reject expensive consumer and prosumer software that
    hinders the extensibility of digital discourse and limits digital production
    literacy to programs and file formats that are destined for disruptive upgrades
    or obsolescence.</p>
  <p>Digital scholars in the loosely defined fields of rhetoric and composition,
    computers and writing, and technical communication should create free and
    open source artifacts that are software- and device-independent. Discourse
    posted on the open Web can hardly be considered free if access requires costly
    software or particular devices.</p>
  <p>Additionally, the literacies and language we develop through engaging in
    digital scholarship and knowledge-making should enable us to speak confidently,
    unambiguously, and critically with one another about the intricacies and
    methods of digital production.</p>
  <p>And as teachers, we should actively work to provide students with sustainable,
    extensible production literacies through open, rhetorically grounded digital
    practices that emphasize the <em>source</em> in “free and open source.”</p>
  <h2>Defining Lo-fi Technologies</h2>
  <p>Lo-fi production technologies are stable, free, and consist of and/or can
    retrograde to:</p>
  <ol>
    <li>Plain text files (.txt, .xml, .htm, .css, .js, etc.)</li>
    <li>Plain text editors (Notepad, TextEdit, pico/nano, vi, etc.)</li>
    <li>Standardized, human-readable forms of open languages expressed in plain
      text (XML, XHTML, CSS, JavaScript, etc.)</li>
    <li>Single-media files (image, audio, video) in open formats</li>
  </ol>
  <p>Despite their humble, decades-old base technology (plain text), innovative
    uses of lo-fi technologies can be remarkably hi-fi, as in the case of <acronym title="Asychronous JavaScript and XML">AJAX</acronym> (whose
    most famous application may be Google’s Gmail service).</p>
  <h2>Lo-fi is <acronym class="lo-fi" title="Lossless, Open, Flexible, In(ter)dependent">LOFI</acronym></h2>
  <p>“Lo-fi” describes a preferred set of production technologies that digital
    producers should strive to command, but as an acronym, <acronym class="lo-fi" title="Lossless, Open, Flexible, In(ter)dependent">LOFI</acronym> outlines
    four principles of digital production that are essential for the advancement,
    extension, and long-term preservation of digital discourse:</p>
  <ul id="lofi-acronym">
    <li><strong>Lossless</strong>: Discourse presented through lo-fi production
      technologies neither degrades nor becomes trapped in the production itself.
      Text migrates and transforms from a single source (e.g., XML, or an application
      of XML) to any number of other devices and artifacts; images, video, and
      other media elements maintain their integrity as individual files that
      are orchestrated with one another at a reader’s moment of access, not at
      the producer’s moment of File &gt; Import or File &gt; Save.</li>
    <li><strong>Open</strong>: Lo-fi artifacts’ source code and media elements
      are available for inspection, revision, and extension outside the scope
      of any one piece of production software and any one producer. Openness
      includes and encourages end-user/reader customization and repurposing.</li>
    <li><strong>Flexible</strong>: Discourse artfully and rhetorically created
      with lo-fi production technologies can be experienced unobtrusively in
      multiple ways by different users equipped with a wide variety of conventional,
      mobile, and adaptive devices—all from a single artifact. No plugins, special
      downloads, or device-/reader-specific artifacts required.</li>
    <li><strong>In(ter)dependent</strong>: Lo-fi production technologies direct
      orchestration (like a recipe), not composition (like a TV dinner), allowing
      users and their devices full control to render (or not) and perhaps repurpose
      the media elements that constitute a digital artifact.</li>
  </ul>
  <h2>Manifesto</h2>
  <!--[if lt IE 7]>
  <p class="warning">Dear IE User,<br />The points below are clickable, even though your browser will give you no visual indication of that. Consider upgrading to <a href="http://www.mozilla.com/firefox/">FireFox</a>, if that's possible: not just to better experience this piece, but to improve your Web experience in general.<br />
—KS</p>
  <![endif]-->
  <dl id="manifesto-points">
    <!--JavaScript should really loop through and add the toggler/element and atStart classes-->
    <dt>1. Software is a poor organizing principle for digital production.</dt>
    <dd>
      <div>
        <blockquote>
          <p>“What program do you use?” is a question I often get about the slides
            I use to present my work. I have concluded that the proper answer
            to the question is to counter-suggest the asking of a different question,
            “What <em>principle</em> do you use?” <cite><span>John Maeda,</span> The
            Laws of Simplicity</cite></p>
        </blockquote>
        <p>As rhetoricians, we should resist allowing software, commercial or
          otherwise, to signify entire digital genres. But compare the number
          of results in a search engine for “rhetoric of PowerPoint” versus “rhetoric
          of slideshows.” The results are not encouraging—and suggest that “vendor
          lock-in” has as much of a grip on discourse as it does on scenes of
          production.</p>
        <p>But consider a software-independent, lo-fi alternative to PowerPoint: <a href="http://meyerweb.com/">Eric
            Meyer</a>, CSS guru and design wizard, developed and <a href="http://meyerweb.com/eric/thoughts/category/tech/s5/">released
            into the public domain</a> a <a href="http://meyerweb.com/eric/tools/s5/">Simple
            Standards-based Slide Show System</a> (S5). Meyer’s system uses the
            lo-fi technologies of structural XHTML, media-specific CSS, and JavaScript
            (languages usually encountered on Web pages) to deploy slideshows.
            Unlike PowerPoint slideshows, which require either the PowerPoint
            software itself or the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=048DC840-14E1-467D-8DCA-19D2A8FD7485&amp;displaylang=en">Microsoft
            PowerPoint Viewer</a> for optimal viewing, S5 slideshows function
            in any modern web browser.</p>
        <p>A lo-fi system like S5 is well suited to the rhetorical situation
          of the slideshow, whose defining characteristic is uncertainty. Slideshows
          are commonly projected on unfamiliar computers (often, it seems, with
          dubious maintenance records) that a speaker might have access to only
          shortly before speaking. Will that computer have PowerPoint installed?
          The right version of PowerPoint, at that? If not, will the logged-in
          user have sufficient privileges and a network connection to download
          the PowerPoint viewer? If all else fails, will a reasonably competent
          IT person be present to step in and help?</p>
        <p>Such problems, rooted in the inflexible digital materiality of the
          PowerPoint file itself, are easily avoided by lo-fi alternatives like
          S5: even if the computer runs an outmoded browser (and what computer
          doesn’t have a browser installed?), S5 or other lo-fi slideshows will
          operate more or less as planned—while still being editable (something
          not possible in the bundled player-slideshow .pps format of PowerPoint).
          Speakers can even keep their slideshow and a <a href="http://portableapps.com/apps/internet/firefox_portable">portable
          version of Firefox</a> on their USB drives (or CD-ROMs, as some über-paranoid
          computer security policies restrict access to USB ports.)</p>
        <p>The move away from the seeming inevitability of software like PowerPoint
          or Flash brings the aims of the digital genre itself into focus: a
          much more flexible, rhetorical approach to production than focusing
          on the features and limitations of a given piece of software.</p>
      </div>
    </dd>
    <dt>2. Digital literacy should reach beyond the limitations of software.</dt>
    <dd>
      <div>
        <blockquote>
          <p>People may be unfitted by being fit in an unfit fitness. <cite><span>Kenneth
                Burke,</span> Permanence and Change</cite></p>
        </blockquote>
        <p>Acts of digital production should contribute to a deeper literacy
          than learning to point and click through an arbitrary set of menus
          and dialog boxes. Production literacies of point-and-click, menu-driven
          WYSIWYG software are not extensible: beyond exposing users to certain
          visual conventions (clicking a 3.5-inch floppy disk icon to save? really?),
          learning to navigate Microsoft Word has little bearing on future efforts
          in PhotoShop or Flash, much less CSS or MySQL.</p>
        <p>Adobe’s <a href="http://www.adobe.com/aboutadobe/invrelations/adobeandmacromedia.html">announcement</a> in
          spring of 2005 that it had purchased Macromedia—the company behind
          Flash, Dreamweaver, and other web production software—should have raised
          serious questions about producing and teaching too closely with particular
          software technologies, which can potentially evaporate as quickly as
          the ink dries on a corporate merger.</p>
        <p>Yet even adopting community-developed, open-source software is not
          necessarily the best response to the inherent instability of corporate
          software packages. True, the digital production literacies learned
          through open-source software, like OpenOffice.org, may be less prone
          to corporate mergers (though not necessarily corporate buyouts—witness <a href="http://www.mysql.com/news-and-events/sun-to-acquire-mysql.html">Sun
          Microsystems purchase of MySQL</a>, arguably the most popular open-source
          database). But community-developed software, like the corporate counterparts
          it often mimics, does not inherently provide for an “under the hood”
          literate encounter with the materiality of digital production languages
          and formats that lo-fi production methods do. Lo-fi operates at the
          material level of technology (code); WYSIWYG software (which describes
          Web editors as much as word processors, page design tools, etc.) keeps
          code and file formats at arm’s length by design.</p>
        <p>Put another way, lo-fi production methods open access to the languages
          that visual interfaces for digital production often obscure: no matter
          what producers have to do to order Dreamweaver around, chances are
          that Dreamweaver will be spitting out the same (bad) code it always
          has.</p>
        <p>Production literacies anchored to open, standardized languages have
          a longer shelf-life than those tied to WYSIWYG software. Although languages,
          like software, are subject to future versions, languages often retain
          much of their essential character (e.g. SGML, HTML, and XML look and
          behave very similarly—despite the fact that SGML was <a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=16387">standardized
          in 1986</a>, and <a href="http://www.w3.org/XML/hist2002">XML in 2000</a>).
          Code written in earlier versions of a language are often viable even
          after a revision of the language: producers can still write HTML 4.01,
          even though XHTML 1.0 is preferable. But forget about trying to pass
          a Word 1.0 document around.</p>
        <p>The stability of languages is due, in part, to common ancestors. For
          example, there are few scripting languages that are not at least influenced
          by C/C++. Learning one language on a family tree prepares one to more
          readily learn others. Even languages that are essentially unrelated
          (say, CSS and PHP, or HTML and Ruby) share much of the same meta vocabulary:
          lines of styles in CSS must be <strong>terminated</strong>, as must
          lines of PHP code. <strong>Nested</strong> tags in HTML resemble statements
          that are <strong>nested</strong> in Ruby. Prepared with this sort of
          vocabulary, digital producers can develop mental modesl for how languages
          operate. They can even leverage exacting Google searches to solve a
          wide range of production problems.</p>
        <p>Developer communities are the other component of a language’s stability.
          Multiple active developer communities surround any given open language:
          not just in the language’s use, but in its development (see e.g., <a href="http://www.php.net/">PHP.net</a>).
          As digital producers develop proficiency in a language, they may be
          able to shape the language’s future development. Such is the case with
          PHP, and in smaller, localized applications of languages, like microformats.
          Production literacies should aim to prepare digital producers to talk
          back to and shape the communities and technologies supporting digital
          discourse.</p>
      </div>
    </dd>
    <dt>3. Discourse should never be trapped by production technologies.</dt>
    <dd>
      <div>
        <blockquote>
          <p>In an extreme view, the world can be seen as only connections, nothing
            else.<cite title="Page 12"> <span>Tim Berners-Lee,</span> Weaving
            the Web</cite></p>
        </blockquote>
        <p>Too many software programs create “roach motels” for content and information:
          the data checks in (via File &gt; Import), but it never checks out.
          Such digital artifacts—the PowerPoint, the PDF—are only marginal improvements
          over the entrapped quality of analog/print information; and in some
          ways (e.g., dependence on a specific piece of software to view the
          artifact) are actually steps backward from the comparatively open access
          that books and other printed matter provide.</p>
        <p>The Web and even the <a href="http://creativecommons.org/">Creative
            Commons</a> are efforts steeped in the promise of openness. But a
            Creative Commons (CC) license that allows for derivative works of
            a Web-available Flash movie is an oxymoron at best (just try to extract
            an image from a Flash movie). At worst, the CC license emphasizes
            gestures of openness over interrogating the materiality of technologies
            and their capacity to support derivative discourse.</p>
        <p>To genuinely make digital discourse friendly to derivative works,
          it needs to be much more flexible (cut and paste does not count). Ultimately,
          end users and their devices should be responsible for combining content
          of different media elements—not software or file formats like Flash,
          and really not producers, either. The producer’s responsibility is
          to reference and orchestrate elements that can be accessed in a combined
          or piecemeal fashion: only then is a CC license viable, maybe even
          honest.</p>
        <p>Any given digital artifact needs to be understood not as a final resting
          place for discourse, but as a stream for further, unfettered access.
          A Web page listing an organization’s members’ names and email addresses,
          for example, can be far more open through the use of <a href="http://microformats.org/">microformats</a>.
          Rather than cutting and pasting the contents of the page, or returning
          each time the page’s information is needed, a user can, via the presence
          of <a href="http://microformats.org/wiki/hcard">the hCard microformat</a> and
          a technology like <a href="https://addons.mozilla.org/firefox/addon/4106">Operator</a>,
          import some or all of the membership’s contact information directly
          into her own email address book. Once email address books become microformat-friendly,
          the address book could query the URL containing the contact information
          and update entries automatically.</p>
        <p>Single-sourcing with lo-fi XML technologies and their microformat
          cousins is an unprecedented and unparalleled method to structure and
          openly share content. But dependence on WYSIWYG software has kept producers
          in our field largely ignorant of XML. Even the XML backbone to OpenOffice.org’s
          implementation of the Open Document Type (ODT) format is a limited
          use of XML. OOo appears to do to XML what FrontPage and Dreamweaver
          have done to HTML: hacking up the language to accomodate visual choices
          (XML is a structural, not visual, markup language), and distorting
          what ought to be human-readable code into something meaningful only
          to machines.</p>
        <p>It would not be much of a stretch to say that our fascination with
          the visual aspects of digital production is the root cause of why we
          continue to ignore matters of structure and language, the two keys
          to more flexible digital discourse. That is not to devalue the importance
          visual expression in the digital medium; but limiting a producer’s
          attention to the visual aspects of digital artifacts, as WYSIWYG software
          does, comes at the expense of the larger concerns of openness.</p>
        <p>In place of openness, we are confronted with the selfishness of closed,
          roach-motel formats and WYWSIWYG software. The selfishness of WYSIWYG
          is implicit in the acroynm: What YOU See is What YOU Get. As though
          YOU, the producer, were the only one who mattered (if it looks good
          for me in Dreamweaver or FrontPage, it must look good everywhere for
          everyone). In a time when screens range between postage-stamp-sized
          cell phones and 71-inch flat panel LCDs, it is lunacy to assume that
          what you, the producer, sees is what everyone sees. And as in the case
          of discourse trapped in a Flash movie, the acronym might be better
          stated as What, If Anything, Readers See is All They Get.</p>
      </div>
    </dd>
    <dt>4. Code-level production is not limited to digital artifacts.</dt>
    <dd>
      <div>
        <blockquote>
          <p>The ability to “read” a medium means you can <em>access</em> materials
            and tools created by others. The ability to “write” in a medium means
            you can <em>generate</em> materials and tools for others. You must
            have both to be literate. <cite class="article" title="Page 125"><span>Alan
            Kay,</span> “User Interface: A Personal View”</cite></p>
        </blockquote>
        <p>Lo-fi technologies rely on human-editable code, rather than corporate
          secrets, to make communication possible. Therefore, in lo-fi productions,
          code is demonstratively as important as content; effective digital
          rhetoric rests on both. Abstracted just a little, being unable to access
          a PowerPoint presentation by virtue of lacking the PowerPoint software
          is ultimately a code issue. No well-meaning digital rhetor intends
          to make content inaccessible; but the unexamined adoption of production
          technologies may do exactly that.</p>
        <p>Languages that early Web writers worked with—HTML, JavaScript (Netscape)/JScript
          (Internet Explorer)—were essentially without a common, workable standard
          (the standards existed, but no browser supported them). Thus the WYSIWYG
          Web editor was readily adopted, as it generated code that was no worse
          (but no better) than what humans could write. Of course, the WYSIWYG-generated
          HTML code was impenetrable, which may help explain why digital producers
          may be prejudiced against code-level Web development today: most of
          what they may have seen not written by humans, but generated by Dreamweaver
          or FrontPage.</p>
        <p>Malformed code, whether written by humans or generated by machines,
          sends the same bad, if unintentional messages about content that a
          shoddily produced print publication does. Writing good code is neither
          an end in itself nor a suggestion that technology trumps all other
          digital rhetorical concerns. But the way code performs in a Web browser
          or other device will certainly seem to be a reflection of the care
          and attention to detail that scholars, in particular, expect of content.</p>
      </div>
    </dd>
    <dt>5. Respect and forgive the end user.</dt>
    <dd>
      <div>
        <blockquote>
          <p>Don’t make me jump through hoops just because you don’t want to
            write a little bit of code. <cite title="Page 164"><span>Steve Krug,</span> Don’t
            Make Me Think, (2nd ed.)</cite></p>
        </blockquote>
        <p>There is not better way to lose the good will of audience members
          than to bombard them series of messages demanding the installation
          or upgrade of software and plugins or, worse still, an announcement
          to the effect that their equipment (and perhaps by extension, financial
          status or physical ability) is inadequate and beyond the producer’s
          toleration.</p>
        <p>Lo-fi production technologies deliver artifacts that are editable
          everywhere, and thanks to the ubiquity of Web browsers, accessible
          everywhere, too (at least to some extent). Rather than developing after-the-fact
          alternative content (e.g., to make up for a missing Flash movie), producing
          and inventing content in lo-fi technologies that is later replaced/enhanced
          by hi-fi technologies is a much smarter way of working.</p>
        <p>Put another way, there is no good reason to type text into a Flash
          movie; XHTML handles text much better than Flash ever will.</p>
        <p>Users will appreciate not being told what they must do (particularly
          if they are left blissfully ignorant of the enhanced coolness they’re
          missing out on); producers can develop content and ideas in far less
          taxing environment (compared to Flash), in far more portable and extensible
          formats, like XML.</p>
      </div>
    </dd>
    <dt>6. If a hi-fi element is necessary, keep it dynamic and unobtrusive.</dt>
    <dd>
      <div>
        <blockquote>
          <p>This is progressive enhancement: it works for everyone, but users
            with modern browsers will see a more usable version. We are, in a
            way, rewarding them for choosing to use a good browser, without being
            rude to Lynx users or employees of companies with paranoid IT departments. <cite class="article"><span>Tommy
            Olsson,</span> “<a href="http://accessites.org/site/2007/02/graceful-degradation-progressive-enhancement/3/">Graceful
            Degradation &amp; Progressive Enhancement</a>”</cite></p>
        </blockquote>
        <p>Ultimately, there are production problems that lo-fi technologies
          are not yet poised to solve: vector graphics (at least until the lo-fi
          SVG standard is natively implemented in Internet Explorer) and 3D-modeling
          are two examples. No browser has native support for sound or video,
          which are accessible only through media players and browser plugins.</p>
        <p>Even lo-fi typography solutions lag behind their hi-fi counterparts,
          like Flash (whose font-embedding capabilities alone drew many in the
          graphic design community away from HTML and CSS); designing with pure
          CSS means limiting oneself to fonts commonly available on most operating
          systems. While there are glimmers of hope that major Web browsers will
          enable <a href="http://www.alistapart.com/articles/cssatten">support
          for TrueType Web fonts</a> (fonts that can be accessed over the Web
          without requiring installation on an end-user’s computer, as in the
          case of basic TrueType fonts), for now the lo-fi-ish typography tool
          of choice is <a href="http://www.mikeindustries.com/sifr">Scalable
          Inman Flash Replacement</a> (sIFR, pron. “siffer,” currently in <a href="http://novemberborn.net/sifr3">version
          3</a>). sIFR relies on the lo-fi technologies of plain text structured
          in XHTML and JavaScript and a small, empty Flash movie containing only
          the font a producer wishes to use on a given Web page.</p>
        <p>With sIFR, if a reader’s browser lacks or has disabled JavaScript
          or the Flash player, the lo-fi CSS styling or simple HTML text will
          be displayed instead: a dynamic (and unobtrusive) improvement over
          CSS <a href="http://www.mezzoblue.com/tests/revised-image-replacement/">image
          replacement techniques</a>—another typography work-around, but which
          fails in an imageless CSS-enabled environment.</p>
        <p>The use of any hi-fi technology should operate much like sIFR: taking
          some readily available media element or text, and enhancing it with
          extended functionality for properly equipped users.</p>
        <p>Unobtrusive solutions like sIFR are rare, though. The videos on YouTube,
          for example, are dynamically loaded into a shell Flash movie that contains
          the controls for playing and pausing the video clip. However, if YouTube
          were to be fully unobtrusive, it would offer links in the HTML to movies
          in different formats (at least until an open, widely supported format
          is available; see “Insist on open standards and formats” below)—not
          just the proprietary Flash Video (.flv) format.</p>
        <p>A dynamic and unobtrusive lo-fi media player solution like Scott Schiller’s <a href="http://www.schillmania.com/projects/soundmanager2/">SoundManager
            2</a> takes simple HTML links to sound files, and makes them playable
            on a Web page for users with both JavaScript and Flash enabled (in
            the absence of JavaScript or Flash, users are able follow the links
            and download the sound files for listening in their own media player).
            Users with Flash are rewarded with an enhanced experience; users
            without Flash are none the wiser, and can still experience the audio
            presented on the page—which is all that the page’s producer could
            have hoped for. In fact, users without Flash have the added advantage
            of being able to download the individual audio files, perhaps for
            loading onto an iPod or other portable audio player.</p>
      </div>
    </dd>
    <dt>7. Insist on open standards and formats, <span class="warning">and software
        that supports them</span>.</dt>
    <dd>
      <div>
        <blockquote>
          <p>Because they share a common parent and abide by the same house rules,
            all XML applications are compatible with each other, making it easier
            for developers to manipulate one set of XML data via another and
            to develop new XML applications as the need arises, without fear
            of incompatibility. <cite title="Page 116"><span>Jeffrey Zeldman,</span> Designing
            with Web Standards, (2nd ed.)</cite></p>
        </blockquote>
        <p>Digital artifacts should outlast the software that played a role in
          their creation. Insisting on open standards and formats, not software
          packages, is the only way to make this happen.</p>
        <p>Software should not be selected based on its high-end features or
          the size of its installed user base in corporate settings. We should
          not trick ourselves into thinking we can better prepare students for
          the workforce by teaching them the most commonly used word processor
          or page design software. Instead, we should prepare students with a
          digital literacy that allows them to focus on the rhetorical situation
          of digital production, which is bounded first and foremost not by software,
          but by the openness and support of standards.</p>
        <p>It’s astounding that there are not yet open standards for sound or
          video. The Ogg media container and its Vorbis and Theora CODECs, for
          sound and video respectively, are both promising solutions (especially
          because they are the preferred media formats on Wikipedia, particularly
          the Wikimedia Commons). Unfortunately, at present, Ogg formats require
          CODECs to be downloaded for use within other media players, adding
          an extra step beyond downloading Windows Media Player, QuickTime, or
          other audio/video players. (However, there is talk of <a href="http://mozillalinks.org/wp/2007/06/firefox-3-to-feature-native-audio-video-support/">native
          Ogg support within Firefox</a> coupled with the <a href="http://www.whatwg.org/">WHATWG</a>’s <a href="http://www.whatwg.org/specs/web-apps/current-work/">HTML
          5 Draft</a> specification, which is competing, somewhat, with the W3C’s <a href="http://www.w3.org/TR/xhtml2/">XHTML
          2 draft spec</a>).</p>
        <p>There are standards for languages, which are openly available from <a href="http://w3.org/">W3C</a> (e.g., <a href="http://www.w3.org/XML/">XML</a>, <a href="http://www.w3.org/TR/xhtml1/">XHTML</a>, <a href="http://www.w3.org/Style/CSS/">CSS</a>)
          and <a href="http://www.ecma-international.org/">ECMA</a> (most notably <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</a>,
          the standard version of JavaScript). But there are other standards,
          from character sets at <a href="http://www.iso.org/">ISO</a> to <a href="http://www.iana.org/assignments/media-types/">file
          formats and MIME/Internet media types</a> at <a href="http://www.iana.org/">IANA</a>.
          And if all else fails, particularly regarding choices of single-media
          files, consult the <a href="http://www.loc.gov/standards/">United States
          Library of Congress’s developed and adopted standards</a>.</p>
        <p>Innovation in the digital medium is not to be found on the paved cow
          paths of point-and-click, template-driven, fill-in-the-blank <acronym title="What You See is What You Get">WYSIWYG</acronym> software.
          Indeed, much of the exciting work on the Web involves working beyond
          the relatively simple languages of XHTML and CSS; the Application Programming
          Interface (API) and the Integrated Development Environment (IDE) are
          where the real envelope-pushing action is. But without the kind of
          source literacy gained from basic languages like XHTML, members of
          our field will be wholly unprepared to build or command APIs or function
          competently in IDEs.</p>
        <p>Source literacy holds the key not only to more sustainable and accessible
          digital discourse, but to our ability to substantively contribute to
          the many open-source projects, like Drupal, Moodle, and even Firefox,
          that are redefining digital writing—largely without us.</p>
      </div>
    </dd>
  </dl>
  <h2>References</h2>
  <ul class="references">
    <li>Berners-Lee, Tim, with Fischetti, Mark. (2000). <cite>Weaving the Web:
        The original design and ultimate destiny of the World Wide Web</cite>.
        New York: HarperBusiness.</li>
    <li>Burke, Kenneth. (1984). <cite>Permanence and change</cite>. Berkeley:
      University of California Press.</li>
    <li>Kay, Alan. User interface: A personal view. In Randall Packer and Ken
      Jordan (Eds.), <cite>Multimedia: From Wagner to virtual reality</cite> (pp.
      121-131). New York: W.W. Norton.</li>
    <li>Krug, Steve. (2006). <cite>Don’t make me think: A common sense approach
        to Web usability</cite> (2nd ed.). Berkeley: New Riders.</li>
    <li>Maeda, John. (2006). <cite>The laws of simplicity</cite>. Cambridge,
      MA: The MIT Press.</li>
    <li>Olsson, Tommy. (2007, February 6). Graceful degradation &amp; progressive
      enhancement. <cite>Accessites.org: The Art of Accessibility</cite>. Retrieved
      February 1, 2008, from <a href="http://accessites.org/site/2007/02/graceful-degradation-progressive-enhancement/3/">http://accessites.org/site/2007/02/graceful-degradation-progressive-enhancement/3/</a></li>
    <li>Zeldman, Jeffrey. (2007). <cite>Designing with Web standards</cite> (2nd
      ed.). Berkeley: New Riders.</li>
  </ul>
  <h2>In-Text Links</h2>
  <ul class="references">
  </ul>
  <h2>Validate this Webtext</h2>
  <p>XHTML 1.0 Strict, CSS</p>
</div>
</body>
</html>
